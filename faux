// search-app.component.ts
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AppService } from '../app.service'; // Adjust path as needed

interface SearchResult {
  appId: string;
  envType: string;
  metrics: {
    fileSystemType: string;
    alertType: string;
    email?: string;
    slack?: string;
    condition: string;
    threshold: number;
    mountPath: string;
  }[];
}

@Component({
  selector: 'app-search-app',
  templateUrl: './search-app.component.html',
  styleUrls: ['./search-app.component.css'],
})
export class SearchAppComponent {
  searchForm: FormGroup;
  searchResults: SearchResult | null = null;
  displayedColumns: string[] = ['fileSystemType', 'alertType', 'email', 'slack', 'condition', 'threshold', 'mountPath'];

  constructor(private fb: FormBuilder, private appService: AppService) {
    this.searchForm = this.fb.group({
      appId: ['', Validators.required],
      envType: ['', Validators.required],
    });
  }

  searchApp() {
    if (this.searchForm.valid) {
      const appId = this.searchForm.value.appId;
      const envType = this.searchForm.value.envType;

      // Simulate service call (replace with actual service call)
      const mockResult: SearchResult = {
        appId: appId,
        envType: envType,
        metrics: [
          {
            fileSystemType: 'ext4',
            alertType: 'email',
            email: 'test@example.com',
            condition: '>',
            threshold: 80,
            mountPath: '/data',
          },
          {
            fileSystemType: 'xfs',
            alertType: 'slack',
            slack: 'slack-webhook-url',
            condition: '<',
            threshold: 50,
            mountPath: '/logs',
          },
        ],
      };

      console.log('Searching for app:', appId, envType);
      console.log('Mock search result:', mockResult);

      this.searchResults = mockResult;
    }
  }
}






<mat-card>
  <mat-card-title>Search Application</mat-card-title>
  <mat-card-content>
    <form [formGroup]="searchForm">
      <div style="display: flex; flex-wrap: wrap;">
        <div style="flex: 1; min-width: 300px; padding-right: 10px;">
          <mat-form-field appearance="outline" style="width: 100%;">
            <mat-label>App ID</mat-label>
            <input matInput formControlName="appId" />
          </mat-form-field>
        </div>
        <div style="flex: 1; min-width: 300px; padding-left: 10px;">
          <mat-form-field appearance="outline" style="width: 100%;">
            <mat-label>Environment Type</mat-label>
            <mat-select formControlName="envType">
              <mat-option value="dev">dev</mat-option>
              <mat-option value="test">test</mat-option>
              <mat-option value="prod">prod</mat-option>
            </mat-select>
          </mat-form-field>
        </div>
      </div>
      <button mat-raised-button color="primary" (click)="searchApp()">Search</button>
    </form>

    <div *ngIf="searchResults">
      <h2>Search Results</h2>
      <p><strong>App ID:</strong> {{ searchResults.appId }}</p>
      <p><strong>Environment:</strong> {{ searchResults.envType }}</p>

      <table mat-table [dataSource]="searchResults.metrics" class="mat-elevation-z8">
        <ng-container matColumnDef="fileSystemType">
          <th mat-header-cell *matHeaderCellDef> File System Type </th>
          <td mat-cell *matCellDef="let element"> {{element.fileSystemType}} </td>
        </ng-container>

        <ng-container matColumnDef="alertType">
          <th mat-header-cell *matHeaderCellDef> Alert Type </th>
          <td mat-cell *matCellDef="let element"> {{element.alertType}} </td>
        </ng-container>

        <ng-container matColumnDef="email">
          <th mat-header-cell *matHeaderCellDef> Email </th>
          <td mat-cell *matCellDef="let element"> {{element.email}} </td>
        </ng-container>

        <ng-container matColumnDef="slack">
          <th mat-header-cell *matHeaderCellDef> Slack </th>
          <td mat-cell *matCellDef="let element"> {{element.slack}} </td>
        </ng-container>

        <ng-container matColumnDef="condition">
          <th mat-header-cell *matHeaderCellDef> Condition </th>
          <td mat-cell *matCellDef="let element"> {{element.condition}} </td>
        </ng-container>

        <ng-container matColumnDef="threshold">
          <th mat-header-cell *matHeaderCellDef> Threshold </th>
          <td mat-cell *matCellDef="let element"> {{element.threshold}} </td>
        </ng-container>

        <ng-container matColumnDef="mountPath">
          <th mat-header-cell *matHeaderCellDef> Mount Path </th>
          <td mat-cell *matCellDef="let element"> {{element.mountPath}} </td>
        </ng-container>

        <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
        <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
      </table>
    </div>
  </mat-card-content>
</mat-card>
